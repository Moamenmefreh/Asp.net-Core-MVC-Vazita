// <auto-generated />
using System;
using Hayaat_Karima.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hayaat_Karima.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240929170645_addtableappointment")]
    partial class addtableappointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hayaat_Karima.Models.AppointmentTB", b =>
                {
                    b.Property<int?>("DocIDfk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("DocIDfk"));

                    b.Property<string>("AppointmentDayDate1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentDayDate2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentDayDate3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentDayDate4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentDayDate5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentDayDate6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentDayDate7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MCIDfk")
                        .HasColumnType("int");

                    b.HasKey("DocIDfk");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.ContactUstb", b =>
                {
                    b.Property<int>("ContactorId")
                        .HasColumnType("int")
                        .HasColumnName("ContactorID");

                    b.Property<string>("ContactorComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactorName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactorPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegIdfk")
                        .HasColumnType("int")
                        .HasColumnName("RegIDFK");

                    b.HasKey("ContactorId");

                    b.ToTable("ContactUSTB");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.DecentLifeDeserversTb", b =>
                {
                    b.Property<int>("DeserversId")
                        .HasColumnType("int")
                        .HasColumnName("DeserversID");

                    b.Property<string>("DeserverAttatchmentsCompressedFolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeserverDateOfbirth")
                        .HasColumnType("date")
                        .HasColumnName("DeserverDateOFBirth");

                    b.Property<bool?>("DeserverGender")
                        .HasColumnType("bit");

                    b.Property<string>("DeserverNid")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("DeserverNID");

                    b.Property<string>("Deserverphone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DeserversName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegIdfk")
                        .HasColumnType("int")
                        .HasColumnName("RegIDFK");

                    b.HasKey("DeserversId")
                        .HasName("PK_DentelDeserversTB");

                    b.ToTable("DecentLifeDeserversTB");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.DoctorsTb", b =>
                {
                    b.Property<int>("DocIdpk")
                        .HasColumnType("int")
                        .HasColumnName("DocIDPK");

                    b.Property<int?>("AppointmentTBDocIDfk")
                        .HasColumnType("int");

                    b.Property<string>("DocAppointments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocNid")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("DocNID");

                    b.Property<string>("DocPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfcasesMonthly")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NumberOFCasesMonthly");

                    b.Property<int?>("RegionId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("regionId");

                    b.Property<int>("SpecializationIdfk")
                        .HasColumnType("int")
                        .HasColumnName("specializationIDFK");

                    b.Property<string>("TechnicalLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DocIdpk");

                    b.HasIndex("AppointmentTBDocIDfk");

                    b.HasIndex("RegionId");

                    b.HasIndex("SpecializationIdfk");

                    b.ToTable("DoctorsTB");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.MedicalConstructionTb", b =>
                {
                    b.Property<int>("Mcidpk")
                        .HasColumnType("int")
                        .HasColumnName("MCIDPK");

                    b.Property<int?>("DoctorsIdfk")
                        .HasColumnType("int")
                        .HasColumnName("doctorsIDFK");

                    b.Property<string>("Mcaddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MCaddress");

                    b.Property<string>("MccontactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MCContactPhone");

                    b.Property<string>("Mcname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MCName");

                    b.Property<string>("Mctype")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MCType");

                    b.Property<int?>("RegIdfk")
                        .HasColumnType("int")
                        .HasColumnName("RegIDFK");

                    b.Property<int?>("SpecializationIdfk")
                        .HasColumnType("int")
                        .HasColumnName("specializationIDFK");

                    b.HasKey("Mcidpk");

                    b.ToTable("MedicalConstructionTB");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.Pateint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Pateints");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.Region", b =>
                {
                    b.Property<int>("PkregionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PKRegionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkregionId"));

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PkregionId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.Report", b =>
                {
                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateTimeOfReport")
                        .HasColumnType("datetime");

                    b.Property<string>("DocAppointments")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("DocName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MccontactPhone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MCContactPhone");

                    b.Property<string>("Mcname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MCName");

                    b.Property<string>("NoName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("NumberOfcasesMonthly")
                        .HasColumnType("float")
                        .HasColumnName("NumberOFCasesMonthly");

                    b.Property<string>("RegIdfk")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("RegIDFK");

                    b.Property<string>("SpecializationIdfk")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("specializationIDFK");

                    b.Property<string>("TechnicalLevel")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.ReservationCardTb", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("int")
                        .HasColumnName("CardID");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("Appointment")
                        .HasColumnType("datetime")
                        .HasColumnName("appointment");

                    b.Property<string>("DesrversName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MedicalConstractionName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CardId");

                    b.ToTable("ReservationCardTB");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.ReservationTb", b =>
                {
                    b.Property<int>("ResvId")
                        .HasColumnType("int")
                        .HasColumnName("ResvID");

                    b.Property<int?>("DocIdFk")
                        .HasColumnType("int")
                        .HasColumnName("DocIdFK");

                    b.Property<int?>("McIdfk")
                        .HasColumnType("int")
                        .HasColumnName("McIDFK");

                    b.Property<string>("ResvAppointment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResvId");

                    b.ToTable("ReservationTB");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.SpecializatinTb", b =>
                {
                    b.Property<int>("SpecializatinIdpk")
                        .HasColumnType("int")
                        .HasColumnName("SpecializatinIDPK");

                    b.Property<string>("SpecializatinName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpecializatinIdpk");

                    b.ToTable("SpecializatinTB");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2ba9db6d-008b-4a93-996a-b7c791385974",
                            ConcurrencyStamp = "3f8a60c4-819a-4acd-9f4a-3e0694bee8a9",
                            Name = "Pateint",
                            NormalizedName = "pateint"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Hayaat_Karima.Models.DoctorsTb", b =>
                {
                    b.HasOne("Hayaat_Karima.Models.AppointmentTB", "AppointmentTB")
                        .WithMany("Doctor")
                        .HasForeignKey("AppointmentTBDocIDfk");

                    b.HasOne("Hayaat_Karima.Models.Region", "region")
                        .WithMany("doctorsregion")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hayaat_Karima.Models.SpecializatinTb", "SpecializatinTb")
                        .WithMany("Doctorsspecial")
                        .HasForeignKey("SpecializationIdfk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentTB");

                    b.Navigation("SpecializatinTb");

                    b.Navigation("region");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hayaat_Karima.Models.AppointmentTB", b =>
                {
                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.Region", b =>
                {
                    b.Navigation("doctorsregion");
                });

            modelBuilder.Entity("Hayaat_Karima.Models.SpecializatinTb", b =>
                {
                    b.Navigation("Doctorsspecial");
                });
#pragma warning restore 612, 618
        }
    }
}
